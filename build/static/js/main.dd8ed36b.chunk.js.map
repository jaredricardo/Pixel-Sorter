{"version":3,"sources":["components/CanvasApp.js","components/functions.js","components/Test.js","App.js","reportWebVitals.js","index.js"],"names":["CanvasApp","props","sortThePixels","state","imageSelected","alert","algo","currentSort","canvas","canvasRef2","current","ctx","getContext","copyData","getImageData","width","height","data","imageWidth","imageHeight","pixelArr","i","length","pixel","push","arrayOfCols","colArr","j","sort","a","b","nativeFunction","sortedArr","forEach","ImageData","Uint8ClampedArray","test","sum1","nativeFunction_COL","nativeSort_COL2x","col","nativeSort_COL","nativeSort","putImageData","setState","imageSorted","setSortOption","e","target","value","imageLoadHandler","files","size","canvas1","canvasRef1","canvas2","ctx2","reader","FileReader","img","Image","onload","secondEvent","drawImage","currentImageSrc","result","imageFileSize","bytes","mb","toFixed","kb","toString","fileSize","imageFileName","name","src","readAsDataURL","resetImage","downloadImage","link","document","createElement","download","href","toDataURL","click","imageRef","React","createRef","maxStyle","maxHeight","trigger","visibility","this","textAlign","Container","fluid","className","Row","Col","md","lg","type","accept","ref","uploadedRef","onChange","id","onClick","style","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dd8ed36b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { test, nativeSort_COL2x, nativeSort_COL, nativeSort } from \"./functions\"\nimport Spinner from 'react-bootstrap/Spinner';\nimport { Row, Col, Container, button } from \"react-bootstrap\"\n\n\n\nexport class CanvasApp extends Component {\n    constructor(props) {\n        super(props)\n        this.imageRef = React.createRef()\n        this.canvasRef1 = React.createRef()\n        this.canvasRef2 = React.createRef()\n        this.state = {\n            currentImageSrc: null,\n            imageFileSize: null,\n            imageFileName: null,\n            imageHeight: null,\n            imageWidth: null,\n            imageSelected: false,\n            imageSorted: false,\n            // imageLoading: false, \n            currentSort: 'test'\n        }\n    }\n\n      \n    // drawNewImage = () => {\n    //     this.setState({\n    //         imageLoading: true\n    //     }, this.resetLoading)\n    // }\n\n    sortThePixels = () => {\n\n        if(!this.state.imageSelected) return alert(\"please load an image\")\n\n        const algo = this.state.currentSort\n        const canvas = this.canvasRef2.current\n        const ctx = canvas.getContext(\"2d\")\n        let copyData = ctx.getImageData(0,0, canvas.width, canvas.height)\n\n        if(algo === 'test') {\n            copyData = test(copyData.data, this.state.imageHeight, this.state.imageWidth)\n        } \n        if(algo === 'nativeSort_COL_2x') {\n            copyData = nativeSort_COL2x(copyData.data, this.state.imageHeight, this.state.imageWidth)\n        } \n        if(algo === 'nativeSort_COL') {\n            copyData = nativeSort_COL(copyData.data, this.state.imageHeight, this.state.imageWidth)\n        } \n        if(algo === 'nativeSort') {\n            copyData = nativeSort(copyData.data, this.state.imageHeight, this.state.imageWidth)\n        } \n        ctx.putImageData(copyData,0 ,0)\n\n        this.setState({\n            imageSorted: true\n        })\n    }\n\n\n    setSortOption = (e) => {\n        this.setState({\n            currentSort: e.target.value,\n        })\n    }\n\n    imageLoadHandler = (e) => {\n\n        if(e.target.files[0].size > 104857600) return alert(\"File size exceeds 100MB\") \n\n        const canvas1 = this.canvasRef1.current\n        const ctx = canvas1.getContext(\"2d\")\n        \n        const canvas2 = this.canvasRef2.current\n        const ctx2 = canvas2.getContext(\"2d\")\n\n        const reader = new FileReader()\n        const img = new Image()\n\n        reader.onload = (secondEvent) => {\n           \n            img.onload = () => {\n                const fileSize = (bytes) => {\n                    const mb = (bytes / 1000000).toFixed(1) + 'MB'\n                    const kb = (bytes / 1000).toFixed(1) + \"KB\"\n                    const digits = bytes.toString().length \n                    return digits >= 7 ? mb : kb \n                }\n\n                canvas1.width = img.width\n                canvas1.height = img.height\n\n                canvas2.width = img.width\n                canvas2.height = img.height\n\n                ctx.drawImage(img,0,0)\n                ctx2.drawImage(img,0,0)\n\n                this.setState({\n                        currentImageSrc: secondEvent.target.result,\n                        imageFileSize: fileSize(e.target.files[0].size),\n                        imageFileName: e.target.files[0].name,\n                        imageHeight: img.height,\n                        imageWidth: img.width,\n                        imageSelected: true,\n                        imageSorted: false\n                    })\n                }\n            img.src = secondEvent.target.result;\n        }\n        reader.readAsDataURL(e.target.files[0])\n    }\n\n    resetImage = () => {\n        if(!this.state.imageSelected) return alert('No image selected')\n        if(!this.state.imageSorted) return alert('Image already reset')\n        const canvas = this.canvasRef2.current\n        const ctx = canvas.getContext(\"2d\")\n        const img = new Image()\n\n        img.onload = () => {\n            canvas.width = img.width\n            canvas.height = img.height\n            ctx.drawImage(img,0,0)   \n        }\n        img.src = this.state.currentImageSrc\n        this.setState({\n            imageSorted: false\n        })\n    }\n\n    downloadImage = () => {\n        if(!this.state.imageSorted) return alert(\"Image must be sorted before downloading\")\n        const link = document.createElement('a')\n        link.download = \"sorted \" + this.state.imageFileName \n        link.href = this.canvasRef2.current.toDataURL()\n        link.click()\n    }\n\n    render() {\n        \n        const maxStyle = {\n            maxHeight: '700px',\n            width: 'auto' \n        }\n\n        const trigger = {\n            visibility: (this.state.imageSelected) ? 'visible' : 'hidden',\n            textAlign: 'center'\n            \n        }\n\n        return (\n            <Container fluid className=\"ghost-body\"> \n                <Row> \n                    <Col className=\"p-0\" md={12} lg={6}> \n                        <div className=\"top-margin text-center\">\n                            <input type=\"file\" accept=\"image/*\" ref={this.uploadedRef} onChange={this.imageLoadHandler} />\n\n                            <select name=\"options\" id=\"sort-options\" onChange={this.setSortOption}>\n                                <option value=\"test\">Test</option>\n                                <option value=\"nativeSort_COL_2x\">Columned Native Sort x 2</option>\n                                <option value=\"nativeSort_COL\">Columned Native Sort</option>\n                                <option value=\"nativeSort\">Native Sort</option>\n                            </select>\n                        </div> \n                    </Col>\n                    <Col className=\"p-0\" md={12} lg={6}>\n                        <div className=\"text-center top-margin\">\n                            <button className=\"btn btn-primary\" onClick={this.sortThePixels}>\n                                Sort Image\n                                {/* {this.checkLoading()} */}\n                            </button>\n\n                            <button className=\"btn btn-primary\" onClick={this.resetImage}>\n                                Reset Image\n                            </button>\n\n                            <button className=\"btn btn-primary\" onClick={this.downloadImage}> \n                                Download \n                            </button>\n                        </div>                       \n                    </Col>   \n                </Row>\n\n                <Row className=\"justify-content-center\">\n\n                    <Col className=\"flex-grow-0\">\n                        <p style={trigger}> Original </p>\n                        <canvas ref={this.canvasRef1} style={maxStyle}/>\n                    </Col>\n\n                    <Col className=\"flex-grow-0\">\n                        <p style={trigger}> Sorted </p>\n                        <canvas ref={this.canvasRef2} style={maxStyle}/>\n                    </Col>\n\n                </Row>           \n            </Container>\n        )\n    }\n}\n\n\nexport default CanvasApp\n","export function nativeSort(data, imageWidth, imageHeight) {\n\n    let pixelArr = []\n\n    for(let i = 0; i < data.length; i+=4) {\n        let pixel = [data[i],data[i + 1],data[i + 2],data[i + 3]]\n        pixelArr.push(pixel)\n    }\n    \n    function nativeFunction() {\n        pixelArr.sort((a, b) => {\n            let sum1 = a[0] + a[1] + a[2] + a[3]\n            let sum2 = b[0] + b[1] + b[2] + b[3]\n            return sum1 - sum2\n        })\n    }\n\n    nativeFunction()\n\n    let sortedArr = []\n\n    pixelArr.forEach((pixel) => {\n        sortedArr.push(pixel[0], pixel[1], pixel[2], pixel[3])\n    })\n\n    const imageData = new ImageData(new Uint8ClampedArray(sortedArr), imageHeight, imageWidth)  \n    return imageData\n}\n\n\n\nexport function nativeSort_COL(data, imageWidth, imageHeight) {\n\n    let pixelArr = []\n\n    for(let i = 0; i < data.length; i+=4) {\n        let pixel = [data[i],data[i + 1],data[i + 2],data[i + 3]]\n        pixelArr.push(pixel)\n    }\n\n    let arrayOfCols = []\n\n    for(let i = 0; i < imageWidth; i++) {\n        let colArr = []\n        for(let j = 0; j < pixelArr.length; j+=imageWidth){\n            colArr.push(pixelArr[j])\n        }\n        arrayOfCols.push(colArr)\n    }\n\n    function nativeFunction_COL() {\n        arrayOfCols.forEach((col) => {\n            col.sort((a, b) => {\n                let sum1 = a[0] + a[1] + a[2] + a[3]\n                let sum2 = b[0] + b[1] + b[2] + b[3]\n                return sum1 - sum2 \n            })\n        })\n    }\n\n    nativeFunction_COL()\n\n    let sortedArr = []\n\n    for(let i = 0; i < imageWidth; i++) {\n        arrayOfCols[i].forEach((pixel) => {\n            sortedArr.push(pixel[0], pixel[1], pixel[2], pixel[3])\n        })\n    }\n\n    const imageData = new ImageData(new Uint8ClampedArray(sortedArr), imageHeight, imageWidth)  \n    return imageData\n}\n\n\nexport function nativeSort_COL2x(data, imageWidth, imageHeight) {\n\n    let pixelArr = []\n\n    for(let i = 0; i < data.length; i+=4) {\n        let pixel = [data[i],data[i + 1],data[i + 2],data[i + 3]]\n        pixelArr.push(pixel)\n    }\n\n    let arrayOfCols = []\n\n    for(let i = 0; i < imageWidth; i++) {\n        let colArr = []\n        for(let j = 0; j < pixelArr.length; j+=imageWidth){\n            colArr.push(pixelArr[j])\n        }\n        arrayOfCols.push(colArr)\n    }\n\n    function nativeFunction_COL() {\n        for(let i = 0; i < arrayOfCols.length; i++) {\n            i % 2 === 0 ? arrayOfCols[i].sort((a,b) => {\n                let sum1 = a[0] + a[1] + a[2] + a[3]\n                let sum2 = b[0] + b[1] + b[2] + b[3]\n                return sum1 - sum2 \n            }) \n            :\n            arrayOfCols[i].sort((a,b) => {\n                let sum1 = a[0] + a[1] + a[2] + a[3]\n                let sum2 = b[0] + b[1] + b[2] + b[3]\n                return sum2 - sum1 \n            }) \n        }\n    }\n\n    nativeFunction_COL()\n\n    let sortedArr = []\n\n    for(let i = 0; i < imageWidth; i++) {\n        arrayOfCols[i].forEach((pixel) => {\n            sortedArr.push(pixel[0], pixel[1], pixel[2], pixel[3])\n        })\n    }\n\n    const imageData = new ImageData(new Uint8ClampedArray(sortedArr), imageHeight, imageWidth)  \n    return imageData\n}\n\n\n\nexport function test(data, imageWidth, imageHeight) {\n\n    let pixelArr = []\n\n    for(let i = 0; i < data.length; i+=4) {\n        let pixel = [data[i],data[i + 1],data[i + 2],data[i + 3]]\n        pixelArr.push(pixel)\n    }\n\n    let arrayOfCols = []\n\n    for(let i = 0; i < imageWidth; i++) {\n        let colArr = []\n        for(let j = 0; j < pixelArr.length; j+=imageWidth){\n            colArr.push(pixelArr[j])\n        }\n        arrayOfCols.push(colArr)\n    }\n\n    function nativeFunction() {\n        for(let i = 0; i < arrayOfCols.length; i++) {\n            arrayOfCols[i].sort((a,b) => {\n                \n                return a - b  \n            }) \n        }\n    }\n\n    nativeFunction()\n\n    let sortedArr = []\n\n    for(let i = 0; i < imageWidth; i++) {\n        arrayOfCols[i].forEach((pixel) => {\n            sortedArr.push(pixel[0], pixel[1], pixel[2], pixel[3])\n        })\n    }\n    const imageData = new ImageData(new Uint8ClampedArray(sortedArr), imageHeight, imageWidth)  \n    return imageData\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// not using bubble sort\n\nexport function bubbleSort(data, imageWidth, imageHeight) {\n\n    let pixelArr = []\n\n    for(let i = 0; i < data.length; i+=4) {\n        let pixel = [data[i],data[i + 1],data[i + 2],data[i + 3]]\n        pixelArr.push(pixel)\n    }\n    \n    let swapped;\n    \n    function bubbleFunction(arr) {\n        swapped = false\n        let end = arr.length - 1\n        for(let i = 0 ; i < end; i++) {\n            let sum1 = arr[i][0] + arr[i][1] + arr[i][2] + arr[i][3]\n            let sum2 = arr[i+1][0] + arr[i+1][1] + arr[i+1][2] + arr[i+1][3]\n            if(sum1 > sum2) {\n                swapped = true\n                let temp = arr[i]\n                arr[i] = arr[i+1]\n                arr[i+1] = temp\n            }\n        }\n        end--\n    }\n    do {bubbleFunction(pixelArr)} while (swapped)\n\n    let sortedArr = []\n\n    pixelArr.forEach((pixel) => {\n        sortedArr.push(pixel[0], pixel[1], pixel[2], pixel[3])\n    })\n\n    const imageData = new ImageData(new Uint8ClampedArray(sortedArr), imageHeight, imageWidth)  \n    return imageData\n}\n\n\n            // OLD FUNCTION ?? \n\n\n// for some reason, when I define the function params, they imageW and imageH must be \n// inverted from how passed in the function call, which then displays all the sorted pixels\n// correctly across whatever canvas size. \n\n// this.state.imageHeight goes through imageWidth           ???\n// and this.state.imageWidth goes through imageHeight       ??? \n\nexport function incaseifuckup(data, imageWidth, imageHeight) {\n\n    let pixelArr = []\n    let twoDArr = []\n    \n    // Create array of pixels. Each index is a \"pixel\" array containg the 4 RGBA integers that make up that singular pixel. \n\n    for(let i = 0; i < data.length; i+=4) {\n        let pixel = [data[i],data[i + 1],data[i + 2],data[i + 3]]\n        pixelArr.push(pixel)\n    }\n\n    // Create rows to be pushed into 2D array. Each row is an array containg the row length of pixel arrays. Do this for the pixel height (column) of the image. \n\n    for(let i = 0; i < imageWidth; i++) {\n\n        let row = []                //  init an empty row before each outer loop \n\n        for(let j = 0; j < imageHeight; j++) {\n            row.push(pixelArr[j])\n        }\n        twoDArr.push(row)           // push row into 2D array \n    }\n\n    //Now that that 2D array has been properly built with row x col dimensions, we can write a pixel sorting algorithm.\n\n    for(let i = 0; i < twoDArr.length; i++) {                   // going over all rows in two d array\n        twoDArr[i].sort((a,b) => a[0] - b[0])                   //sorting by [0] index (red hue)\n    }\n    \n    // Now build normal array from multi array to be converted to Uint8ClampedArray\n\n    let convertedArr = []\n\n    for(let i = 0; i < twoDArr.length; i++) {\n        twoDArr[i].forEach(function(pixel){\n            convertedArr.push(pixel[0], pixel[1], pixel[2], pixel[3])\n        })\n    }\n    \n    console.log(convertedArr)\n    // create new image object and return \n\n    const imageData = new ImageData(new Uint8ClampedArray(convertedArr), imageHeight, imageWidth)  \n    return imageData\n}","import React, { Component } from 'react'\nimport Spinner from 'react-bootstrap/Spinner';\n\nexport class Test extends Component {\n    constructor(props) {\n        super(props)\n    \n        this.state = {\n             loading: false\n        }\n    }\n\n    fakeCall = () => {\n        console.log(\"sorting your phat pixels\")\n        this.setState({\n            loading: !this.state.loading\n        }, this.returnToNormal)\n    }\n\n    fakeWait = () => {\n        setTimeout(() => {\n            console.log(\"phat pixels have been sorted\")\n            this.setState({\n                loading: false\n            })\n        }, 3000)\n    }\n\n    returnToNormal = async () => {\n        await this.fakeWait()\n    }\n\n    checkLoading = () => {\n        if(this.state.loading) {\n            return <Spinner animation=\"border\" size=\"sm\"/>\n        } else {\n            return \n        }\n    }\n\n    testBubble = () => {\n        let uns = [1,77,3,200,45,23423,65,234,87,2,33,5,766,4,-4,6,0,222,5]\n        let swapped;\n\n        function bubble(arr) {\n            swapped = false\n            let end = arr.length - 1\n            for(let i = 0 ; i < end; i++) {\n                if(arr[i] > arr[i+1]) {\n                    swapped = true\n                    let temp = arr[i]\n                    arr[i] = arr[i+1]\n                    arr[i+1] = temp\n                }\n            }\n            end--\n        } \n        do {bubble(uns)} while (swapped)\n        console.log(uns)\n    }\n\n    testBubble2 = () => {\n        let uns = [[255,0,0,255],[0,0,0,0],[60,0,0,255],[343,343,1,255],[245,0,0,255]]\n        let swapped;\n\n        function bubbleSort(arr) {\n            swapped = false\n            let end = arr.length - 1\n            for(let i = 0 ; i < end; i++) {\n                let sum1 = arr[i][0] + arr[i][1] + arr[i][2] + arr[i][3]\n                let sum2 = arr[i+1][0] + arr[i+1][1] + arr[i+1][2] + arr[i+1][3]\n                if(sum1 > sum2) {\n                    swapped = true\n                    let temp = arr[i]\n                    arr[i] = arr[i+1]\n                    arr[i+1] = temp\n                }\n            }\n            end--\n        } \n        do {bubbleSort(uns)} while (swapped)\n        console.log(uns)\n    }\n    \n    \n    render() {\n\n        return (\n            <div>\n                <button onClick={this.testBubble2}> \n                \n                    Make something happen \n                    {this.checkLoading()}\n                </button>\n            </div>\n        )\n    }\n}\n\nexport default Test\n","import './App.css';\nimport CanvasApp from './components/CanvasApp'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Row, Col, Container } from \"react-bootstrap\"\nimport Test from './components/Test'\n\n\n\nfunction App() {\n  return (\n    <div>\n      {/* <Test /> */}\n      <CanvasApp />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}