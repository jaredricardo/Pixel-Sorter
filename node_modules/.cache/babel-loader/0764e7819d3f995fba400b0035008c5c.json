{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jaredricardo/Desktop/apps/drag drop unused rn/src/components/CanvasApp.js\";\nimport React, { Component } from 'react';\nimport testImage from \"./test-images/150.jpg\";\nexport class CanvasApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.drawNewImage = () => {\n      const canvas = this.refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      let copyData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(copyData, 0, 0);\n      getDimensions(copyData.data);\n      swap(copyData.data);\n      console.log(copyData.data);\n      ctx.putImageData(copyData, 0, 0);\n    };\n\n    this.swap = data => {\n      let randomNum = Math.floor(Math.random() * 256);\n      console.log(width);\n    };\n\n    this.state = {\n      imageHeight: null,\n      imageWidth: null\n    };\n  }\n\n  componentDidMount() {\n    const canvas = this.refs.canvas;\n    canvas.height = 200;\n    canvas.width = 200;\n    const ctx = canvas.getContext(\"2d\");\n    const img = this.refs.image;\n\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0); // ctx.font = \"40px Courier\"\n      // ctx.fillText(this.props.text, 210, 75)\n    };\n\n    this.setState({\n      imageHeight: canvas.height,\n      imageWidth: canvas.width\n    });\n  }\n\n  render() {\n    const width = this.state.imageWidth;\n    const height = this.state.imageHeight;\n\n    function test(data) {\n      for (let i = 0; i < data.length; i += 4) {\n        data[i] = data[i] ^ 255; // Invert Red\n\n        data[i + 1] = data[i + 1] ^ 255; // Invert Green\n\n        data[i + 2] = data[i + 2] ^ 255; // Invert Blue\n      }\n    }\n\n    function getData() {} // function test(data) {\n    //    console.log(data)\n    // }\n\n\n    const hidden = {\n      display: \"none\"\n    };\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.drawNewImage,\n        children: \"test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: \"canvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          ref: \"image\",\n          src: testImage,\n          style: hidden\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default CanvasApp;","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/apps/drag drop unused rn/src/components/CanvasApp.js"],"names":["React","Component","testImage","CanvasApp","constructor","props","drawNewImage","canvas","refs","ctx","getContext","copyData","getImageData","width","height","putImageData","getDimensions","data","swap","console","log","randomNum","Math","floor","random","state","imageHeight","imageWidth","componentDidMount","img","image","onload","drawImage","setState","render","test","i","length","getData","hidden","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport testImage from \"./test-images/150.jpg\"\n\nexport class CanvasApp extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n             imageHeight: null,\n             imageWidth: null\n        }\n    }\n\n    componentDidMount() {\n        const canvas = this.refs.canvas\n        canvas.height = 200\n        canvas.width = 200\n        const ctx = canvas.getContext(\"2d\")\n        const img = this.refs.image\n\n        img.onload = () => {\n            ctx.drawImage(img, 0, 0)\n            // ctx.font = \"40px Courier\"\n            // ctx.fillText(this.props.text, 210, 75)\n          }\n        \n        this.setState({\n            imageHeight:canvas.height,\n            imageWidth:canvas.width\n        })  \n      }\n\n\n       drawNewImage = () => {\n\n        const canvas = this.refs.canvas\n        const ctx = canvas.getContext(\"2d\")\n\n        let copyData = ctx.getImageData(0,0, canvas.width, canvas.height)\n        ctx.putImageData(copyData, 0, 0)\n\n        getDimensions(copyData.data)\n        swap(copyData.data)\n        console.log(copyData.data)\n\n        ctx.putImageData(copyData,0 ,0 )\n    }\n\n     swap = (data) => {\n        let randomNum = Math.floor(Math.random()* 256)\n       \n        console.log(width)\n         \n      }\n       \n    render() {\n        const width = this.state.imageWidth\n        const height = this.state.imageHeight\n        \n        function test(data) {\n            for (let i = 0; i < data.length; i+= 4) {\n              data[i] = data[i] ^ 255; // Invert Red\n              data[i+1] = data[i+1] ^ 255; // Invert Green\n              data[i+2] = data[i+2] ^ 255; // Invert Blue\n            }\n          }\n\n          function getData() {\n\n          }\n\n          \n\n\n\n        // function test(data) {\n        //    console.log(data)\n        // }\n       \n\n       \n\n     \n\n        const hidden = {\n            display: \"none\"\n        }\n\n        return (\n            <React.Fragment> \n\n                {/* <div className=\"container\">\n                    <img src={testImage} id=\"img\"style={style}/>\n                </div> */}\n                \n                <button onClick={this.drawNewImage}>\n                    test\n                </button>\n\n                <div className=\"container\">\n                    <canvas ref=\"canvas\"/> \n                    <img ref=\"image\" src={testImage} style={hidden} />\n                </div>\n                \n                <div> \n                    \n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default CanvasApp\n"]},"metadata":{},"sourceType":"module"}