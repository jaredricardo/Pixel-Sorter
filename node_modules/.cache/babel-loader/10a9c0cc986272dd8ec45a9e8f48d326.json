{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jaredricardo/Desktop/apps/Pixel-Sorter/src/components/CanvasApp.js\";\nimport React, { Component } from 'react';\nimport testImage from \"./test-images/200.jpg\";\nimport { arrowFunctionExpression } from '@babel/types';\nexport class CanvasApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.test = data => {\n      this.setState({\n        imageHeight: canvas.height,\n        imageWidth: canvas.width\n      });\n      const rowLength = this.state.imageWidth;\n      const colLength = this.state.imageHeight;\n      let pixelArr = [];\n      let twoDArr = []; // Create array of pixels. Each index is a \"pixel\" array containg the 4 RGBA integers that make up that singular pixel. \n\n      for (let i = 0; i < data.length; i += 4) {\n        let pixel = [data[i], data[i + 1], data[i + 2], data[i + 3]];\n        pixelArr.push(pixel);\n      } // Create rows to be pushed into 2D array. Each row is an array containg the row length of pixel arrays. Do this for the pixel height (column) of the image. \n\n\n      for (let i = 0; i < colLength; i++) {\n        let row = []; //  init an empty row before each outer loop \n\n        for (let j = 0; j < rowLength; j++) {\n          row.push(pixelArr[j]);\n        }\n\n        twoDArr.push(row); // push row into 2D array \n      } // console.log(twoDArr[199].slice(0,10))\n      //Now that that 2D array has been properly built with row x col dimensions, we can write a pixel sorting algorithm.\n\n\n      for (let i = 0; i < twoDArr.length; i++) {\n        // going over all rows in two d array\n        twoDArr[i].sort((a, b) => a[3] - b[3]); //sorting by [0] index (red hue)\n      } // console.log(twoDArr[199].slice(0,10))\n      // Now build normal array from multi array to be converted to Uint8ClampedArray\n      // console.log(twoDArr[0])\n\n\n      let convertedArr = [];\n\n      for (let i = 0; i < twoDArr.length; i++) {\n        twoDArr[i].forEach(function (pixel) {\n          convertedArr.push(pixel[0], pixel[1], pixel[2], pixel[3]);\n        });\n      } // create new image object and return \n\n\n      const imageData = new ImageData(new Uint8ClampedArray(convertedArr), this.state.imageHeight, this.state.imageWidth);\n      return imageData;\n    };\n\n    this.drawNewImage = () => {\n      const canvas = this.canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      let copyData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(copyData, 0, 0);\n      copyData = this.test(copyData.data);\n      ctx.putImageData(copyData, 0, 0);\n    };\n\n    this.setOption = () => {\n      console.log('test');\n    };\n\n    this.imageRef = /*#__PURE__*/React.createRef();\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      imageHeight: null,\n      imageWidth: null\n    };\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    const img = this.imageRef.current; // canvas.height = 200\n    // canvas.width = 200\n\n    const ctx = canvas.getContext(\"2d\");\n\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0);\n    };\n  }\n\n  render() {\n    const convertedStyle = {\n      border: \"1px solid red\"\n    };\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.drawNewImage,\n        children: \"test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"options\",\n        id: \"sort-options\",\n        onChange: this.setOption,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"one\",\n          children: \"Sort by red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"two\",\n          children: \"Sort by blue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"three\",\n          children: \"Sort by reen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"four\",\n          children: \"Sort by brightness\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" Original \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          ref: this.imageRef,\n          src: testImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" to be converted \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef,\n          style: convertedStyle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default CanvasApp;","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/apps/Pixel-Sorter/src/components/CanvasApp.js"],"names":["React","Component","testImage","arrowFunctionExpression","CanvasApp","constructor","props","test","data","setState","imageHeight","canvas","height","imageWidth","width","rowLength","state","colLength","pixelArr","twoDArr","i","length","pixel","push","row","j","sort","a","b","convertedArr","forEach","imageData","ImageData","Uint8ClampedArray","drawNewImage","canvasRef","current","ctx","getContext","copyData","getImageData","putImageData","setOption","console","log","imageRef","createRef","componentDidMount","img","onload","drawImage","render","convertedStyle","border"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport testImage from \"./test-images/200.jpg\"\nimport { arrowFunctionExpression } from '@babel/types'\n\nexport class CanvasApp extends Component {\n    constructor(props) {\n        super(props)\n        this.imageRef = React.createRef()\n        this.canvasRef = React.createRef()\n        this.state = {\n             imageHeight: null,\n             imageWidth: null\n        }\n      \n    }\n\n    componentDidMount() {\n        const canvas = this.canvasRef.current\n        const img = this.imageRef.current\n        // canvas.height = 200\n        // canvas.width = 200\n        const ctx = canvas.getContext(\"2d\")\n\n        img.onload = () => {\n            ctx.drawImage(img, 0, 0)\n          }\n      \n      }\n\n   \n\n    test = (data) => {\n        \n        this.setState({\n            imageHeight:canvas.height,\n            imageWidth:canvas.width\n        })  \n\n        const rowLength = this.state.imageWidth\n        const colLength = this.state.imageHeight \n        let pixelArr = []\n        let twoDArr = []\n        \n        // Create array of pixels. Each index is a \"pixel\" array containg the 4 RGBA integers that make up that singular pixel. \n\n        for(let i = 0; i < data.length; i+=4) {\n            let pixel = [data[i],data[i + 1],data[i + 2],data[i + 3]]\n            pixelArr.push(pixel)\n        }\n\n        // Create rows to be pushed into 2D array. Each row is an array containg the row length of pixel arrays. Do this for the pixel height (column) of the image. \n\n        for(let i = 0; i < colLength; i++) {\n\n            let row = []                //  init an empty row before each outer loop \n\n            for(let j = 0; j < rowLength; j++) {\n                row.push(pixelArr[j])\n            }\n            twoDArr.push(row)           // push row into 2D array \n        }\n        \n        // console.log(twoDArr[199].slice(0,10))\n\n        //Now that that 2D array has been properly built with row x col dimensions, we can write a pixel sorting algorithm.\n\n        for(let i = 0; i < twoDArr.length; i++) {                   // going over all rows in two d array\n            twoDArr[i].sort((a,b) => a[3] - b[3])                   //sorting by [0] index (red hue)\n        }\n\n        // console.log(twoDArr[199].slice(0,10))\n        \n        // Now build normal array from multi array to be converted to Uint8ClampedArray\n        \n        // console.log(twoDArr[0])\n\n        let convertedArr = []\n\n        for(let i = 0; i < twoDArr.length; i++) {\n            twoDArr[i].forEach(function(pixel){\n                convertedArr.push(pixel[0], pixel[1], pixel[2], pixel[3])\n            })\n        }\n\n        // create new image object and return \n\n        const imageData = new ImageData(new Uint8ClampedArray(convertedArr), this.state.imageHeight, this.state.imageWidth)  \n\n        return imageData\n    }\n\n    \n\n    drawNewImage = () => {\n        const canvas = this.canvasRef.current\n        const ctx = canvas.getContext(\"2d\")\n        let copyData = ctx.getImageData(0,0, canvas.width, canvas.height)\n        ctx.putImageData(copyData, 0, 0)\n\n        copyData = this.test(copyData.data)\n\n        ctx.putImageData(copyData,0 ,0 )\n    }\n\n    setOption = () => {\n        console.log('test')\n    }\n\n    \n    render() {\n\n        const convertedStyle = {\n            border: \"1px solid red\"\n        }\n\n        return (\n            <React.Fragment> \n                \n                <button onClick={this.drawNewImage}>\n                    test\n                </button>\n                <select name=\"options\" id=\"sort-options\" onChange={this.setOption}>\n                    <option value=\"one\">Sort by red</option>\n                    <option value=\"two\">Sort by blue</option>\n                    <option value=\"three\">Sort by reen</option>\n                    <option value=\"four\">Sort by brightness</option>\n                </select>\n\n                <div className=\"container\">\n\n                        <p> Original </p>\n\n                    <img ref={this.imageRef} src={testImage} />\n\n                        <p> to be converted </p>\n\n                    <canvas ref={this.canvasRef}  style={convertedStyle}/> \n                </div>\n                \n                <div> \n                    \n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\n\nexport default CanvasApp\n"]},"metadata":{},"sourceType":"module"}