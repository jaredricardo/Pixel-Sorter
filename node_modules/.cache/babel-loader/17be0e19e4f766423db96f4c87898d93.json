{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jaredricardo/Desktop/apps/Pixel-Sorter/src/components/CanvasAppCopy.js\";\nimport React, { Component } from 'react';\nimport testImage from \"./test-images/200.jpg\";\nimport { arrowFunctionExpression } from '@babel/types';\nexport class CanvasAppCopy extends Component {\n  constructor(props) {\n    super(props);\n\n    this.drawNewImage = () => {\n      const canvas = this.refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      let imageData = ctx.getImageData(0, 0, this.state.imageWidth, this.state.imageHeight);\n      imageData.data.sort();\n      ctx.putImageData(imageData, 0, 0);\n      console.log(imageData.data);\n      console.log('done');\n    };\n\n    this.state = {\n      imageHeight: null,\n      imageWidth: null\n    };\n  }\n\n  componentDidMount() {\n    const canvas = this.refs.canvas;\n    canvas.height = 200;\n    canvas.width = 200;\n    const ctx = canvas.getContext(\"2d\");\n    const img = this.refs.image;\n\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0);\n    };\n\n    this.setState({\n      imageHeight: canvas.height,\n      imageWidth: canvas.width\n    });\n  }\n\n  render() {\n    const width = this.state.imageWidth;\n    const height = this.state.imageHeight;\n    const hidden = {\n      display: \"none\"\n    };\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.drawNewImage,\n        children: \"test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" Original \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          ref: \"image\",\n          src: testImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" to be converted \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: \"canvas\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default CanvasAppCopy; // original pixel sort copy \n// drawNewImage = () => {\n//     const canvas = this.refs.canvas\n//     const ctx = canvas.getContext(\"2d\")\n//     let imageData = ctx.getImageData(0,0, this.state.imageWidth, this.state.imageHeight)\n//     for(let i = 0; i < imageData.data.length; i+=4) {\n//         for(let j = 0; j < imageData.data.length - i - 4; j+=4) {\n//             let curRed = imageData.data[i]\n//             let curGreen = imageData.data[i + 1]\n//             let curBlue = imageData.data[i + 2]\n//             let curBright = (curRed + curGreen + curBlue) / 3\n//             let nextRed = imageData.data[i +4] \n//             let nextGreen = imageData.data[i + 5]\n//             let nextBlue = imageData.data[i + 6]\n//             let nextBright = (nextRed + nextGreen + nextBlue) / 3\n//             if(curBright < nextBright) {\n//                 imageData.data[i] = nextRed\n//                 imageData.data[i+1] = nextGreen\n//                 imageData.data[i+2] = nextBlue\n//                 imageData.data[i+4] = curRed\n//                 imageData.data[i+5] = curGreen\n//                 imageData.data[i+6] = curBlue\n//             }\n//         }\n//     }\n//     ctx.putImageData(imageData, 0, 0)\n//     console.log(imageData.data)\n//     console.log('done')\n// }","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/apps/Pixel-Sorter/src/components/CanvasAppCopy.js"],"names":["React","Component","testImage","arrowFunctionExpression","CanvasAppCopy","constructor","props","drawNewImage","canvas","refs","ctx","getContext","imageData","getImageData","state","imageWidth","imageHeight","data","sort","putImageData","console","log","componentDidMount","height","width","img","image","onload","drawImage","setState","render","hidden","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport testImage from \"./test-images/200.jpg\"\nimport { arrowFunctionExpression } from '@babel/types'\n\nexport class CanvasAppCopy extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n             imageHeight: null,\n             imageWidth: null\n        }\n    }\n\n    componentDidMount() {\n        const canvas = this.refs.canvas\n        canvas.height = 200\n        canvas.width = 200\n        const ctx = canvas.getContext(\"2d\")\n        const img = this.refs.image\n\n        img.onload = () => {\n            ctx.drawImage(img, 0, 0)\n          }\n        this.setState({\n            imageHeight:canvas.height,\n            imageWidth:canvas.width\n        })  \n      }\n\n\n    drawNewImage = () => {\n\n        const canvas = this.refs.canvas\n        const ctx = canvas.getContext(\"2d\")\n\n\n        let imageData = ctx.getImageData(0,0, this.state.imageWidth, this.state.imageHeight)\n\n        imageData.data.sort()\n\n        ctx.putImageData(imageData, 0, 0)\n        console.log(imageData.data)\n        console.log('done')\n    }\n\n    \n    render() {\n\n        const width = this.state.imageWidth\n        const height = this.state.imageHeight\n\n        const hidden = {\n            display: \"none\"\n        }\n\n        return (\n            <React.Fragment> \n\n                {/* <div className=\"container\">\n                    <img src={testImage} id=\"img\"style={style}/>\n                </div> */}\n                \n                <button onClick={this.drawNewImage}>\n                    test\n                </button>\n\n                <div className=\"container\">\n\n                        <p> Original </p>\n\n                    <img ref=\"image\" src={testImage}  />\n\n                        <p> to be converted </p>\n\n                    <canvas ref=\"canvas\"/> \n                </div>\n                \n                <div> \n                    \n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default CanvasAppCopy\n\n\n\n// original pixel sort copy \n\n// drawNewImage = () => {\n\n//     const canvas = this.refs.canvas\n//     const ctx = canvas.getContext(\"2d\")\n\n\n//     let imageData = ctx.getImageData(0,0, this.state.imageWidth, this.state.imageHeight)\n\n//     for(let i = 0; i < imageData.data.length; i+=4) {\n//         for(let j = 0; j < imageData.data.length - i - 4; j+=4) {\n\n//             let curRed = imageData.data[i]\n//             let curGreen = imageData.data[i + 1]\n//             let curBlue = imageData.data[i + 2]\n//             let curBright = (curRed + curGreen + curBlue) / 3\n\n//             let nextRed = imageData.data[i +4] \n//             let nextGreen = imageData.data[i + 5]\n//             let nextBlue = imageData.data[i + 6]\n//             let nextBright = (nextRed + nextGreen + nextBlue) / 3\n\n//             if(curBright < nextBright) {\n//                 imageData.data[i] = nextRed\n//                 imageData.data[i+1] = nextGreen\n//                 imageData.data[i+2] = nextBlue\n//                 imageData.data[i+4] = curRed\n//                 imageData.data[i+5] = curGreen\n//                 imageData.data[i+6] = curBlue\n//             }\n\n//         }\n//     }\n//     ctx.putImageData(imageData, 0, 0)\n//     console.log(imageData.data)\n//     console.log('done')\n// }"]},"metadata":{},"sourceType":"module"}