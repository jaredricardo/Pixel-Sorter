{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jaredricardo/Desktop/apps/Pixel-Sorter/src/components/CanvasApp.js\";\nimport React, { Component } from 'react';\nimport { test, nativeSort_COL2x, nativeSort_COL, nativeSort } from \"./functions\";\nimport Spinner from 'react-bootstrap/Spinner';\nimport { Row, Col, Container, button } from \"react-bootstrap\";\nexport class CanvasApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sortThePixels = () => {\n      if (!this.state.imageSelected) return alert(\"please load an image\");\n      const algo = this.state.currentSort;\n      const canvas = this.canvasRef2.current;\n      const ctx = canvas.getContext(\"2d\");\n      let copyData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n      if (algo === 'test') {\n        copyData = test(copyData.data, this.state.imageHeight, this.state.imageWidth);\n      }\n\n      if (algo === 'nativeSort_COL_2x') {\n        copyData = nativeSort_COL2x(copyData.data, this.state.imageHeight, this.state.imageWidth);\n      }\n\n      if (algo === 'nativeSort_COL') {\n        copyData = nativeSort_COL(copyData.data, this.state.imageHeight, this.state.imageWidth);\n      }\n\n      if (algo === 'nativeSort') {\n        copyData = nativeSort(copyData.data, this.state.imageHeight, this.state.imageWidth);\n      }\n\n      ctx.putImageData(copyData, 0, 0);\n      this.setState({\n        imageSorted: true\n      });\n    };\n\n    this.setSortOption = e => {\n      this.setState({\n        currentSort: e.target.value\n      });\n    };\n\n    this.imageLoadHandler = e => {\n      if (e.target.files[0].size > 104857600) return alert(\"File size exceeds 100MB\");\n      const canvas1 = this.canvasRef1.current;\n      const ctx = canvas1.getContext(\"2d\");\n      const canvas2 = this.canvasRef2.current;\n      const ctx2 = canvas2.getContext(\"2d\");\n      const reader = new FileReader();\n      const img = new Image();\n\n      reader.onload = secondEvent => {\n        img.onload = () => {\n          const fileSize = bytes => {\n            const mb = (bytes / 1000000).toFixed(1) + 'MB';\n            const kb = (bytes / 1000).toFixed(1) + \"KB\";\n            const digits = bytes.toString().length;\n            return digits >= 7 ? mb : kb;\n          };\n\n          canvas1.width = img.width;\n          canvas1.height = img.height;\n          canvas2.width = img.width;\n          canvas2.height = img.height;\n          ctx.drawImage(img, 0, 0);\n          ctx2.drawImage(img, 0, 0);\n          this.setState({\n            currentImageSrc: secondEvent.target.result,\n            imageFileSize: fileSize(e.target.files[0].size),\n            imageFileName: e.target.files[0].name,\n            imageHeight: img.height,\n            imageWidth: img.width,\n            imageSelected: true,\n            imageSorted: false\n          });\n        };\n\n        img.src = secondEvent.target.result;\n      };\n\n      reader.readAsDataURL(e.target.files[0]);\n    };\n\n    this.resetImage = () => {\n      if (!this.state.imageSelected) return alert('No image selected');\n      if (!this.state.imageSorted) return alert('Image already reset');\n      const canvas = this.canvasRef2.current;\n      const ctx = canvas.getContext(\"2d\");\n      const img = new Image();\n\n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.drawImage(img, 0, 0);\n      };\n\n      img.src = this.state.currentImageSrc;\n      this.setState({\n        imageSorted: false\n      });\n    };\n\n    this.downloadImage = () => {\n      if (!this.state.imageSorted) return alert(\"Image must be sorted before downloading\");\n      const link = document.createElement('a');\n      link.download = \"sorted \" + this.state.imageFileName;\n      link.href = this.canvasRef1.current.toDataURL();\n      link.click();\n    };\n\n    this.imageRef = /*#__PURE__*/React.createRef();\n    this.canvasRef1 = /*#__PURE__*/React.createRef();\n    this.canvasRef2 = /*#__PURE__*/React.createRef();\n    this.state = {\n      currentImageSrc: null,\n      imageFileSize: null,\n      imageFileName: null,\n      imageHeight: null,\n      imageWidth: null,\n      imageSelected: false,\n      imageSorted: false,\n      // imageLoading: false, \n      currentSort: 'test'\n    };\n  } // drawNewImage = () => {\n  //     this.setState({\n  //         imageLoading: true\n  //     }, this.resetLoading)\n  // }\n\n\n  render() {\n    const maxStyle = {\n      maxHeight: '700px',\n      width: 'auto'\n    };\n    const trigger = {\n      visibility: this.state.imageSelected ? 'visible' : 'hidden',\n      textAlign: 'center'\n    };\n    return /*#__PURE__*/_jsxDEV(Container, {\n      fluid: true,\n      className: \"align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-center button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \"image/*\",\n            ref: this.uploadedRef,\n            onChange: this.imageLoadHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"options\",\n            id: \"sort-options\",\n            onChange: this.setSortOption,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"test\",\n              children: \"Test\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"nativeSort_COL_2x\",\n              children: \"Columned Native Sort x 2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"nativeSort_COL\",\n              children: \"Columned Native Sort\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"nativeSort\",\n              children: \"Native Sort\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: this.sortThePixels,\n            children: \"Sort Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: this.resetImage,\n            children: \"Reset Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary\",\n            onClick: this.downloadImage,\n            children: \"Download\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        className: \"justify-content-center\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          className: \"flex-grow-0\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: trigger,\n            children: \" Original \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: this.canvasRef1,\n            style: maxStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          className: \"flex-grow-0\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: trigger,\n            children: \" Sorted \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n            ref: this.canvasRef2,\n            style: maxStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default CanvasApp;","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/apps/Pixel-Sorter/src/components/CanvasApp.js"],"names":["React","Component","test","nativeSort_COL2x","nativeSort_COL","nativeSort","Spinner","Row","Col","Container","button","CanvasApp","constructor","props","sortThePixels","state","imageSelected","alert","algo","currentSort","canvas","canvasRef2","current","ctx","getContext","copyData","getImageData","width","height","data","imageHeight","imageWidth","putImageData","setState","imageSorted","setSortOption","e","target","value","imageLoadHandler","files","size","canvas1","canvasRef1","canvas2","ctx2","reader","FileReader","img","Image","onload","secondEvent","fileSize","bytes","mb","toFixed","kb","digits","toString","length","drawImage","currentImageSrc","result","imageFileSize","imageFileName","name","src","readAsDataURL","resetImage","downloadImage","link","document","createElement","download","href","toDataURL","click","imageRef","createRef","render","maxStyle","maxHeight","trigger","visibility","textAlign","uploadedRef"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { test, nativeSort_COL2x, nativeSort_COL, nativeSort } from \"./functions\"\nimport Spinner from 'react-bootstrap/Spinner';\nimport { Row, Col, Container, button } from \"react-bootstrap\"\n\n\n\nexport class CanvasApp extends Component {\n    constructor(props) {\n        super(props)\n        this.imageRef = React.createRef()\n        this.canvasRef1 = React.createRef()\n        this.canvasRef2 = React.createRef()\n        this.state = {\n            currentImageSrc: null,\n            imageFileSize: null,\n            imageFileName: null,\n            imageHeight: null,\n            imageWidth: null,\n            imageSelected: false,\n            imageSorted: false,\n            // imageLoading: false, \n            currentSort: 'test'\n        }\n    }\n\n      \n    // drawNewImage = () => {\n    //     this.setState({\n    //         imageLoading: true\n    //     }, this.resetLoading)\n    // }\n\n    sortThePixels = () => {\n\n        if(!this.state.imageSelected) return alert(\"please load an image\")\n\n        const algo = this.state.currentSort\n        const canvas = this.canvasRef2.current\n        const ctx = canvas.getContext(\"2d\")\n        let copyData = ctx.getImageData(0,0, canvas.width, canvas.height)\n\n        if(algo === 'test') {\n            copyData = test(copyData.data, this.state.imageHeight, this.state.imageWidth)\n        } \n        if(algo === 'nativeSort_COL_2x') {\n            copyData = nativeSort_COL2x(copyData.data, this.state.imageHeight, this.state.imageWidth)\n        } \n        if(algo === 'nativeSort_COL') {\n            copyData = nativeSort_COL(copyData.data, this.state.imageHeight, this.state.imageWidth)\n        } \n        if(algo === 'nativeSort') {\n            copyData = nativeSort(copyData.data, this.state.imageHeight, this.state.imageWidth)\n        } \n        ctx.putImageData(copyData,0 ,0)\n\n        this.setState({\n            imageSorted: true\n        })\n    }\n\n\n    setSortOption = (e) => {\n        this.setState({\n            currentSort: e.target.value,\n        })\n    }\n\n    imageLoadHandler = (e) => {\n\n        if(e.target.files[0].size > 104857600) return alert(\"File size exceeds 100MB\") \n\n        const canvas1 = this.canvasRef1.current\n        const ctx = canvas1.getContext(\"2d\")\n        \n        const canvas2 = this.canvasRef2.current\n        const ctx2 = canvas2.getContext(\"2d\")\n\n        const reader = new FileReader()\n        const img = new Image()\n\n        reader.onload = (secondEvent) => {\n           \n            img.onload = () => {\n                const fileSize = (bytes) => {\n                    const mb = (bytes / 1000000).toFixed(1) + 'MB'\n                    const kb = (bytes / 1000).toFixed(1) + \"KB\"\n                    const digits = bytes.toString().length \n                    return digits >= 7 ? mb : kb \n                }\n\n                canvas1.width = img.width\n                canvas1.height = img.height\n\n                canvas2.width = img.width\n                canvas2.height = img.height\n\n                ctx.drawImage(img,0,0)\n                ctx2.drawImage(img,0,0)\n\n                this.setState({\n                        currentImageSrc: secondEvent.target.result,\n                        imageFileSize: fileSize(e.target.files[0].size),\n                        imageFileName: e.target.files[0].name,\n                        imageHeight: img.height,\n                        imageWidth: img.width,\n                        imageSelected: true,\n                        imageSorted: false\n                    })\n                }\n            img.src = secondEvent.target.result;\n        }\n        reader.readAsDataURL(e.target.files[0])\n    }\n\n    resetImage = () => {\n        if(!this.state.imageSelected) return alert('No image selected')\n        if(!this.state.imageSorted) return alert('Image already reset')\n        const canvas = this.canvasRef2.current\n        const ctx = canvas.getContext(\"2d\")\n        const img = new Image()\n\n        img.onload = () => {\n            canvas.width = img.width\n            canvas.height = img.height\n            ctx.drawImage(img,0,0)   \n        }\n        img.src = this.state.currentImageSrc\n        this.setState({\n            imageSorted: false\n        })\n    }\n\n    downloadImage = () => {\n        if(!this.state.imageSorted) return alert(\"Image must be sorted before downloading\")\n        const link = document.createElement('a')\n        link.download = \"sorted \" + this.state.imageFileName \n        link.href = this.canvasRef1.current.toDataURL()\n        link.click()\n    }\n\n    render() {\n        \n        const maxStyle = {\n            maxHeight: '700px',\n            width: 'auto' \n        }\n\n        const trigger = {\n            visibility: (this.state.imageSelected) ? 'visible' : 'hidden',\n            textAlign: 'center'\n        }\n\n        return (\n            <Container fluid className=\"align-items-center\"> \n                <Row className=\"justify-content-center button-container\"> \n                    <div>\n                        <input type=\"file\" accept=\"image/*\" ref={this.uploadedRef} onChange={this.imageLoadHandler} />\n                        \n                        <select name=\"options\" id=\"sort-options\" onChange={this.setSortOption}>\n                            <option value=\"test\">Test</option>\n                            <option value=\"nativeSort_COL_2x\">Columned Native Sort x 2</option>\n                            <option value=\"nativeSort_COL\">Columned Native Sort</option>\n                            <option value=\"nativeSort\">Native Sort</option>\n                        </select>\n\n                        <button className=\"btn btn-primary\" onClick={this.sortThePixels}>\n                            Sort Image\n                            {/* {this.checkLoading()} */}\n                        </button>\n\n                        <button className=\"btn btn-primary\" onClick={this.resetImage}>\n                            Reset Image\n                        </button>\n\n                        <button className=\"btn btn-primary\" onClick={this.downloadImage}> \n                            Download \n                        </button>\n                    </div>\n                </Row>\n\n                <Row className=\"justify-content-center\">\n\n                    <Col className=\"flex-grow-0\">\n                        <p style={trigger}> Original </p>\n                        <canvas ref={this.canvasRef1} style={maxStyle}/>\n                    </Col>\n\n                    <Col className=\"flex-grow-0\">\n                        <p style={trigger}> Sorted </p>\n                        <canvas ref={this.canvasRef2} style={maxStyle}/>\n                    </Col>\n\n                </Row>           \n            </Container>\n        )\n    }\n}\n\n\nexport default CanvasApp\n"]},"metadata":{},"sourceType":"module"}