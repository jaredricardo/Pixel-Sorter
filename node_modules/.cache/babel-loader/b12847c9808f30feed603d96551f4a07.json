{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jaredricardo/Desktop/apps/Pixel-Sorter/src/components/CanvasApp.js\";\nimport React, { Component } from 'react';\nimport testImage from \"./test-images/200.jpg\";\nimport { arrowFunctionExpression } from '@babel/types';\nexport class CanvasApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.test = data => {\n      const rowLength = this.state.imageWidth;\n      const colLength = this.state.imageHeight;\n      let pixelArr = [];\n      let twoDArr = []; // Create array of pixels. Each index is a \"pixel\" array containg the 4 RGBA integers that make up that singular pixel. \n\n      for (let i = 0; i < data.length; i += 4) {\n        let pixel = [data[i], data[i + 1], data[i + 2], data[i + 3]];\n        pixelArr.push(pixel);\n      } // Create rows to be pushed into 2D array. Each row is an array containg the row length of pixel arrays. Do this for the pixel height (column) of the image. \n\n\n      for (let i = 0; i < colLength; i++) {\n        let row = []; //  init an empty row before each outer loop \n\n        for (let j = 0; j < rowLength; j++) {\n          row.push(pixelArr[j]);\n        }\n\n        twoDArr.push(row); // push row into 2D array \n      }\n\n      console.group('before sort');\n      console.log(twoDArr[0].slice(0, 10)); //Now that that 2D array has been properly built with row x col dimensions, we can write a pixel sorting algorithm.\n      // for(let i = 0; i < twoDArr.length; i++) {                   // going over all rows in two d array \n      //     for(let j = 0; j < twoDArr[i].length ; j++) {           // going over current row i \n      //         for(let k = 0; k < twoDarr[i][j].length; k++]) {     //  comparing pixels k in row \n      //             if(twoDArr[i][j][k][0] < twoDArr[i][j][k + 1][0] )\n      //         }\n      //     }\n      // }\n\n      console.log('after sort');\n      console.log(twoDArr[0].slice(0, 10));\n      console.log(twoDArr[0][0][0][0]);\n    };\n\n    this.drawNewImage = () => {\n      const canvas = this.refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      let copyData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      ctx.putImageData(copyData, 0, 0);\n      this.test(copyData.data);\n      ctx.putImageData(copyData, 0, 0);\n    };\n\n    this.state = {\n      imageHeight: null,\n      imageWidth: null\n    };\n  }\n\n  componentDidMount() {\n    const canvas = this.refs.canvas;\n    canvas.height = 200;\n    canvas.width = 200;\n    const ctx = canvas.getContext(\"2d\");\n    const img = this.refs.image;\n\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0);\n    };\n\n    this.setState({\n      imageHeight: canvas.height,\n      imageWidth: canvas.width\n    });\n  }\n\n  render() {\n    const hidden = {\n      display: \"none\"\n    };\n    const converted = {\n      border: \"1px solid red\"\n    };\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.drawNewImage,\n        children: \"test\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" Original \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          ref: \"image\",\n          src: testImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" to be converted \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: \"canvas\",\n          style: converted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default CanvasApp;","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/apps/Pixel-Sorter/src/components/CanvasApp.js"],"names":["React","Component","testImage","arrowFunctionExpression","CanvasApp","constructor","props","test","data","rowLength","state","imageWidth","colLength","imageHeight","pixelArr","twoDArr","i","length","pixel","push","row","j","console","group","log","slice","drawNewImage","canvas","refs","ctx","getContext","copyData","getImageData","width","height","putImageData","componentDidMount","img","image","onload","drawImage","setState","render","hidden","display","converted","border"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport testImage from \"./test-images/200.jpg\"\nimport { arrowFunctionExpression } from '@babel/types'\n\nexport class CanvasApp extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n             imageHeight: null,\n             imageWidth: null\n        }\n    }\n\n    componentDidMount() {\n        const canvas = this.refs.canvas\n        canvas.height = 200\n        canvas.width = 200\n        const ctx = canvas.getContext(\"2d\")\n        const img = this.refs.image\n\n        img.onload = () => {\n            ctx.drawImage(img, 0, 0)\n          }\n        this.setState({\n            imageHeight:canvas.height,\n            imageWidth:canvas.width\n        })  \n      }\n\n   \n\n    test = (data) => {\n\n        const rowLength = this.state.imageWidth\n        const colLength = this.state.imageHeight \n        let pixelArr = []\n        let twoDArr = []\n        \n\n        // Create array of pixels. Each index is a \"pixel\" array containg the 4 RGBA integers that make up that singular pixel. \n\n        for(let i = 0; i < data.length; i+=4) {\n            let pixel = [data[i],data[i + 1],data[i + 2],data[i + 3]]\n            pixelArr.push(pixel)\n        }\n\n        // Create rows to be pushed into 2D array. Each row is an array containg the row length of pixel arrays. Do this for the pixel height (column) of the image. \n\n        \n\n        for(let i = 0; i < colLength; i++) {\n\n            let row = []                //  init an empty row before each outer loop \n\n            for(let j = 0; j < rowLength; j++) {\n                row.push(pixelArr[j])\n            }\n\n            twoDArr.push(row)           // push row into 2D array \n\n        }\n        \n        \n        console.group('before sort')\n        console.log(twoDArr[0].slice(0,10))\n\n\n        //Now that that 2D array has been properly built with row x col dimensions, we can write a pixel sorting algorithm.\n\n        // for(let i = 0; i < twoDArr.length; i++) {                   // going over all rows in two d array \n        //     for(let j = 0; j < twoDArr[i].length ; j++) {           // going over current row i \n        //         for(let k = 0; k < twoDarr[i][j].length; k++]) {     //  comparing pixels k in row \n        //             if(twoDArr[i][j][k][0] < twoDArr[i][j][k + 1][0] )\n        //         }\n        //     }\n        // }\n\n        console.log('after sort')\n        console.log(twoDArr[0].slice(0,10))\n        console.log(twoDArr[0][0][0][0])\n        \n    }\n\n\n    drawNewImage = () => {\n        const canvas = this.refs.canvas\n        const ctx = canvas.getContext(\"2d\")\n        let copyData = ctx.getImageData(0,0, canvas.width, canvas.height)\n        ctx.putImageData(copyData, 0, 0)\n\n       \n        this.test(copyData.data)\n\n        ctx.putImageData(copyData,0 ,0 )\n    }\n\n    \n    render() {\n\n        const hidden = {\n            display: \"none\"\n        }\n\n        const converted = {\n            border: \"1px solid red\"\n        }\n\n        return (\n            <React.Fragment> \n\n                {/* <div className=\"container\">\n                    <img src={testImage} id=\"img\"style={style}/>\n                </div> */}\n                \n                <button onClick={this.drawNewImage}>\n                    test\n                </button>\n\n                <div className=\"container\">\n\n                        <p> Original </p>\n\n                    <img ref=\"image\" src={testImage} />\n\n                        <p> to be converted </p>\n\n                    <canvas ref=\"canvas\"  style={converted}/> \n                </div>\n                \n                <div> \n                    \n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\n\nexport default CanvasApp\n"]},"metadata":{},"sourceType":"module"}