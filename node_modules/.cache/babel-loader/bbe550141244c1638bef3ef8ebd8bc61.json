{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jaredricardo/Desktop/apps/Pixel-Sorter/src/components/CanvasApp.js\";\nimport React, { Component } from 'react';\nimport testImage from \"./test-images/300x200.jpg\";\nimport { sortByRed, sortByGreen, sortByBlue, test } from \"./functions\";\nimport { identifier } from '@babel/types';\nexport class CanvasApp extends Component {\n  constructor(props) {\n    super(props);\n\n    this.drawNewImage = () => {\n      if (!this.state.imageSelected) return alert(\"please load an image\");\n      const canvas = this.canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      let copyData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n      if (this.state.currentSort === 'sortByRed') {\n        copyData = sortByRed(copyData.data, this.state.imageHeight, this.state.imageWidth);\n      }\n\n      if (this.state.currentSort === 'sortByGreen') {\n        copyData = sortByGreen(copyData.data, this.state.imageHeight, this.state.imageWidth);\n      }\n\n      if (this.state.currentSort === 'sortByBlue') {\n        copyData = sortByBlue(copyData.data, this.state.imageHeight, this.state.imageWidth);\n      }\n\n      if (this.state.currentSort === 'test') {\n        this.setState({\n          imageLoading: true\n        });\n        copyData = test(copyData.data, this.state.imageHeight, this.state.imageWidth);\n      }\n\n      ctx.putImageData(copyData, 0, 0);\n      this.setState({\n        imageLoading: false\n      });\n    };\n\n    this.setSortOption = e => {\n      this.setState({\n        currentSort: e.target.value\n      });\n    };\n\n    this.imageLoadHandler = e => {\n      const canvas = this.canvasRef.current;\n      const ctx = canvas.getContext(\"2d\");\n      const reader = new FileReader();\n\n      reader.onload = function (event) {\n        const img = new Image();\n\n        img.onload = function () {\n          canvas.width = img.naturalWidth;\n          canvas.height = img.naturalHeight;\n          ctx.drawImage(img, 0, 0);\n        };\n\n        img.src = event.target.result;\n      };\n\n      reader.readAsDataURL(e.target.files[0]);\n      this.setState({\n        imageSelected: true,\n        imageHeight: 720,\n        // needs to be set dynamically\n        imageWidth: 1280 // needs to be set dybnamically \n\n      });\n    };\n\n    this.imageRef = /*#__PURE__*/React.createRef();\n    this.canvasRef = /*#__PURE__*/React.createRef();\n    this.state = {\n      imageSelected: false,\n      imageLoading: false,\n      imageHeight: null,\n      imageWidth: null,\n      currentSort: 'test'\n    };\n  } // componentDidMount() {\n  //     const canvas = this.canvasRef.current\n  //     const img = this.imageRef.current\n  //     const ctx = canvas.getContext(\"2d\")\n  //     canvas.height = 200\n  //     canvas.width = 300\n  //     img.onload = () => {\n  //         ctx.drawImage(img, 0, 0)\n  //       }\n  //     this.setState({\n  //         imageHeight:canvas.height,\n  //         imageWidth:canvas.width\n  //     })  \n  //   }\n\n\n  render() {\n    const {\n      imageLoading\n    } = this.state;\n    const hiddenStyle = {\n      display: \"none\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: this.imageLoadHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"options\",\n        id: \"sort-options\",\n        onChange: this.setSortOption,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"sortByRed\",\n          children: \"Sort by red\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"sortByGreen\",\n          children: \"Sort by green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"sortByBlue\",\n          children: \"Sort by blue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"sortByBright\",\n          children: \"Sort by brightness\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.drawNewImage,\n        disabled: imageLoading,\n        children: \"SORT!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: this.canvasRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this);\n  }\n\n}\nexport default CanvasApp;","map":{"version":3,"sources":["/Users/jaredricardo/Desktop/apps/Pixel-Sorter/src/components/CanvasApp.js"],"names":["React","Component","testImage","sortByRed","sortByGreen","sortByBlue","test","identifier","CanvasApp","constructor","props","drawNewImage","state","imageSelected","alert","canvas","canvasRef","current","ctx","getContext","copyData","getImageData","width","height","currentSort","data","imageHeight","imageWidth","setState","imageLoading","putImageData","setSortOption","e","target","value","imageLoadHandler","reader","FileReader","onload","event","img","Image","naturalWidth","naturalHeight","drawImage","src","result","readAsDataURL","files","imageRef","createRef","render","hiddenStyle","display"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport testImage from \"./test-images/300x200.jpg\"\nimport { sortByRed, sortByGreen, sortByBlue, test } from \"./functions\"\nimport { identifier } from '@babel/types'\n\n\nexport class CanvasApp extends Component {\n    constructor(props) {\n        super(props)\n        this.imageRef = React.createRef()\n        this.canvasRef = React.createRef()\n        this.state = {\n            imageSelected: false,\n            imageLoading: false, \n            imageHeight: null,\n            imageWidth: null,\n            currentSort: 'test'\n        }\n    }\n\n    // componentDidMount() {\n    //     const canvas = this.canvasRef.current\n    //     const img = this.imageRef.current\n     \n    //     const ctx = canvas.getContext(\"2d\")\n\n    //     canvas.height = 200\n    //     canvas.width = 300\n\n    //     img.onload = () => {\n    //         ctx.drawImage(img, 0, 0)\n    //       }\n\n    //     this.setState({\n    //         imageHeight:canvas.height,\n    //         imageWidth:canvas.width\n    //     })  \n    //   }\n\n\n\n      \n    drawNewImage = () => {\n\n        if(!this.state.imageSelected) return alert(\"please load an image\")\n\n        const canvas = this.canvasRef.current\n        const ctx = canvas.getContext(\"2d\")\n        let copyData = ctx.getImageData(0,0, canvas.width, canvas.height)\n\n        if(this.state.currentSort === 'sortByRed') {\n            copyData = sortByRed(copyData.data, this.state.imageHeight, this.state.imageWidth)\n        }\n        if(this.state.currentSort === 'sortByGreen') {\n            copyData = sortByGreen(copyData.data, this.state.imageHeight, this.state.imageWidth)\n        }\n        if(this.state.currentSort === 'sortByBlue') {\n            copyData = sortByBlue(copyData.data, this.state.imageHeight, this.state.imageWidth)\n        } \n        if(this.state.currentSort === 'test') {\n            this.setState({imageLoading:true})\n            copyData = test(copyData.data, this.state.imageHeight, this.state.imageWidth)\n        } \n\n        ctx.putImageData(copyData,0 ,0 )\n        this.setState({imageLoading:false})\n    }\n\n    setSortOption = (e) => {\n        this.setState({\n            currentSort: e.target.value\n        })\n    }\n    \n\n    imageLoadHandler = (e) => {\n        const canvas = this.canvasRef.current\n        const ctx = canvas.getContext(\"2d\")\n        const reader = new FileReader();\n        reader.onload = function(event){\n        const img = new Image();\n        img.onload = function(){\n            canvas.width = img.naturalWidth;\n            canvas.height = img.naturalHeight;\n            ctx.drawImage(img,0,0);\n        }\n        img.src = event.target.result;\n        \n        }\n        reader.readAsDataURL(e.target.files[0]); \n        this.setState({\n            imageSelected: true,\n            imageHeight:720,      // needs to be set dynamically\n            imageWidth: 1280,    // needs to be set dybnamically \n        })\n    }\n\n    \n    render() {\n\n        const { imageLoading } = this.state\n\n        const hiddenStyle = {\n            display: \"none\"\n        }\n\n\n        return (\n            <div> \n                \n                <input type=\"file\" onChange={this.imageLoadHandler}>\n\n                    \n                </input>\n\n                <select name=\"options\" id=\"sort-options\" onChange={this.setSortOption}>\n                    <option value=\"sortByRed\">Sort by red</option>\n                    <option value=\"sortByGreen\">Sort by green</option>\n                    <option value=\"sortByBlue\">Sort by blue</option>\n                    <option value=\"sortByBright\">Sort by brightness</option>\n                </select>\n\n                <button onClick={this.drawNewImage} disabled={imageLoading}>\n                 \n                    SORT!\n\n                </button>\n\n                <div className=\"container\">\n\n                    {/* <img ref={this.imageRef} src={testImage} />  */}\n\n                    <canvas ref={this.canvasRef} /> \n\n                </div>\n                \n           \n            </div>\n        )\n    }\n}\n\n\nexport default CanvasApp\n"]},"metadata":{},"sourceType":"module"}